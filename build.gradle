buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

plugins {
    id 'org.ajoberstar.grgit' version '4.1.0'
    id "com.matthewprenger.cursegradle" version '1.4.0'
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'

idea {
    module {
        // For some reason this is necessary for IDEA 2014 workspaces to recognize assets
        inheritOutputDirs = true
        //Exclude directories from being managed
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
    }
    main {
        java {
            srcDir 'src/main/java'
        }
        compileClasspath += api.output
        runtimeClasspath += api.output
    }
}

configurations {
    //Make sure all our sub source set stuff extends the proper base methods so that
    // they can see all the dependencies we have in dependencies including forge
    apiCompile.extendsFrom(compile)
    apiImplementation.extendsFrom(implementation)
    apiCompileOnly.extendsFrom(compileOnly)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

group = "de.shyrik"
version = "${minecraft_version}-${mod_version}.${patch_version}." + (System.env.BUILD_NUMBER ?: "dev")
archivesBaseName = "modularitemframe"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.


minecraft {
    mappings channel: "snapshot", version: "${mappings_version}"

    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                modularitemframe.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                modularitemframe.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--all', '--output', file('src/generated/resources/'),
                    '--mod', 'modularitemframe', 
                    '--existing', file('src/main/resources/')

            mods {
                modularitemframe.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }
    }
}

repositories {
    maven {
        name 'prog'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'tterrag'
        url 'https://maven.tterrag.com/'
    }
    maven {
        name 'HWYLA'
        url "https://maven.tehnut.info"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}:api")
    runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}")

    compileOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}")

    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api")
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")
    
    compileOnly "org.jetbrains:annotations:${jb_annotations}"
}

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
                
        // replace version and mcversion
        expand(
                version: project.version,
                mcversion: "1.16.5"
    	)
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

jar {
    from sourceSets.api.output
    from sourceSets.main.output
}

task deobfJar(type: Jar) {
    from sourceSets.api.output
    from sourceSets.main.output
    classifier = 'deobf'
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    classifier = 'api'
}

tasks.build.dependsOn('deobfJar')

artifacts {
    archives apiJar
    archives deobfJar
    archives jar
}
